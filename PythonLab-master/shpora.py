# <class 'NoneType'>
# <class 'int'>
# <class 'float'>
# <class 'complex'
# <class 'str'>
# <class 'list'()>
# <class 'tuple'>
# <class 'set'> Множества {'a', 'b', 'c'}> Для избавления от дублей.
# <class 'dict'{'key':'value'}>
# <class 'bool'>
# ОПЕРАТОРЫ СРАВНЕНИЯ
# if
# elif
# else


# not 	Логическое «НЕ» 	Возвращает противоположное значение.
# or 	Логическое «ИЛИ» 	Возвращает True, если хотя бы одна из переменных True.
# and 	Логическое «И» 	Возвращает True, если обе переменные True.
# in, not in 	Проверка принадлежности 	Возвращает True, если проверяемая переменная
# содержится/не содержится в последовательности (списке, кортеже, строке...).
# is, is not 	Проверка тождественности 	Возвращает True, если проверяемые объекты
# эквивалентны/не эквиваленты. То есть переменные ссылаются на один и тот же адрес в памяти компьютера.
# ПОБИТОВЫЕ ЛОГИЧЕСКИЕ ОПЕРАТОРЫ (работают непосредственно с битами).
# Большинство битовых операций являются операциями составного присваивания.


# -x ~	Побитовое «НЕ» (NOT). Побитовое отрицание инвертирует все
# биты операнда. То есть, то что было 1 станет 0, и наоборот.
# | 	Побитовое «ИЛИ» (OR). Двоичный разряд результата равен 0 только тогда, когда оба соответствующих бита в равны 0.
# # Во всех других случаях двоичный результат равен 1.
# ^ 	Побитовое «ИСКЛЮЧИТЕЛЬНОЕ ИЛИ» (XOR). Разница между исключающим ИЛИ и
# побитовым ИЛИ в том, что для получения 1 только один бит в паре может быть 1
# & 	Побитовое «И» (AND). Двоичный разряд результата равен 1 только тогда,
# когда оба соответствующих бита операндов равны 1. Результат применения оператора and будет истинным,
# если и первое, и второе являются истинными. Во всех остальных случаях результат — False (0).