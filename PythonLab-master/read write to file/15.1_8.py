# Для работы с файлами в языке Python предусмотрена функция open(),
# которая принимает в качестве первого аргумента имя файла.
# 'r' - Открытие на чтение.
# 'w' - Открытие на запись. Если файл уже существует, то содержимое файла удаляется.
# Если файла не существует — создаётся новый.
# 'x' - Открытие на запись. Если файла не существует — всё работает, иначе — исключение.
# 'a' - Открытие на дозапись, информация добавляется в конец файла.
# 'b' - Открытие в двоичном режиме.
# 't' - Открытие в текстовом режиме.
# '+' - Открытие на чтение и дозапись, информация добавляется в конец файла.
import struct

handle = open("../pup.txt", "r")
data = handle.read()
print(data)
handle.close()
print('-' * 20)

# параметр — encoding. Он принимает в себя строку, которая является названием кодировки, в которой записан файл.
# Вероятнее всего, вам придётся использовать
# значение encoding="utf8" для того, чтобы корректно прочитать кириллицу из файла.

# Метод read() — сохраняет всё содержимое файла как строку.
# Если в метод read() передать число, то вернётся указанное число символов.

handle = open("../pup.txt", "r")
data = handle.readline(15)
print(data)
handle.close()
print('-' * 20)

# Метод readline() читает файл построчно.
# В него можно передавать число, и из строки будет прочитано указанное число символов.
# Важно! Как только мы применили этот метод, то повторное его применение выдаст вторую строку,
# ещё одно — третью строку и так далее.

# Метод readlines() вернёт список, в котором элементами будут строки из файла.
handle = open("../pup.txt", "r")
data = handle.readlines(1)
print(data)
handle.close()
print('-' * 20)
handle = open("../pup.txt", "r")
data = handle.readlines()
print(data)
handle.close()
print('-' * 20)

handle = open("../pup.txt", "r")
for line in handle:
    print(line)

mychast = open('../Частушка.txt', 'rt')
data = mychast.read()
mychast.close()
print(data)

mychast = open('../Частушка.txt', 'rt')
for line in mychast:
    print(line)
mychast.close()
# ЗАПИСЬ В ФАЙЛ.
# два способа записи информации в файл — это метод write() и функция print().
mychast = open('../Частушка.txt', 'w')
mychast.write('И тут я стукнул сапожищем!')
print(mychast)

bodler = open('../The Joyful Corpse.txt', 'rt')
for line in bodler:
    print(line)
bodler.close()
# При записи компьютер использует задержку для буферизации или ждёт явной команды от интерпретатора.
# Метод flush() сразу говорит интерпретатору записать данные в файл.
# Метод close() вызывает внутри себя метод flush() и закрывает файл.
# Оператор with работает так:
#
#         Ключевое слово with.
#         Открытие файла с помощью функции open(), так как мы разбирали выше.
#         Ключевое слово as.
#         Имя, с которым будет ассоциирован открытый файл.
#         Двоеточие.
#         Блок кода, отделенный четырьмя пробелами, по аналогии с циклами и функциями.

with open('../The Joyful Corpse.txt') as bodler:
    for line in bodler:
        print(line)

# Шифр Цезаря, или шифр со сдвигом, — один из самых простых и известных.
# Суть шифра в том, что мы берём некий текст и меняем каждую букву этого
# текста на другую с заранее заданным сдвигом по алфавиту.

# пользователь вводит произвольное целое число, а программа читает некий русский текст из файла
# и зашифровывает его в другой файл со сдвигом, соответствующим этому числу.
alpha = 'абвгдеёжзийклмнопрстуфхцчшщьыъэюя'
alphaUp = 'АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЬЫЪЭЮЯ'
alphaUp = list(map(str.upper, alpha))
print(type(alphaUp))
alphaUp = str(alphaUp)
print(alphaUp)
print(type(alphaUp))
print(*alphaUp)
# print(type(alphaUp))

# alphaUp = str(*alpha) BAD Var
# print(type(alphaUp))
# print(*alphaUp)
# alpha = 'абвгдеёжзийклмнопрстуфхцчшщьыъэюя'
# alphaUp = 'АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЬЫЪЭЮЯ'
# number = int(input('Введите число, на которое нужно сдвинуть текст: '))
# alphaUp = list(map(str.upper, alpha))
# alphaUp = str(alphaUp)
# summary = ''
#
#
# def changeChar(char):
#     if char in alpha:
#         return [(alpha.index(char) + number) % len(alpha)]
#     elif char in alphaUp:
#         return [(alphaUp.index(char) + number) % len(alphaUp)]
#     else:
#         return char
#
#
# with open('alpha.txt', encoding="utf8") as myfile:
#     for line in myfile:
#         for char in line:
#             summary += str.changeChar(char)
#
#
# with open('output.txt', 'w', encoding="utf8") as myfile:
#     myfile.write(summary)

# Разберём этот код
# В первых двух строчках задаем алфавит, по которому будем ходить. Так как символы в верхнем и нижнем регистре отличаются, а мы не хотим, чтобы шифр ломал регистр, то задается два алфавита.
# Запрашиваем у пользователя число, которое будет сдвигом по шифру.
# Определяем переменную summary, это нужно на тот случай, если вдруг файл с текстом будет пустой.
# Определяем функцию, мы к ней ещё вернемся, пока идём дальше.
# Открываем файл, так как там русский текст, указываем кодировку.
# Читаем файл построчно.
# Каждую строку прогоняем через цикл, то есть идём по каждому символу. И тут, наконец, вызываем функцию.
# Функция проверяет, есть ли символ в маленьком или большом алфавите.
# нет, она просто возвращает сам символ, то есть знаки препинания,
# пробелы, переводы строк и прочее мы не меняем и оставляем как есть.
# Однако, если символ попадает в какой-то алфавит,
# тогда мы вычисляем положение этого символа в строке,
# сдвигаем его на введенное пользователем число. Остаток от деления на
# длину алфавита нужен для случая, когда пользователь ввёл число больше,
# чем длина алфавита, например, 35. Тогда остаток будет 2, то есть число 35,
# эквивалентно 2. Таким образом мы добиваемся цикличности сдвига.
# В итоге функция возвращает либо неизменный символ, если это не буква русского алфавита, либо символ смещённый.
# Собираем из изменённых символов текст в переменную summary.
# Открываем на запись другой файл и записываем туда эту переменную.
#, encoding="utf8"
# alpha = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя'
# alphaUp = 'АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ'
# number = int(input('Введите число, на которое нужно сдвинуть текст: '))
#
# summary = ''
#
#
# def changeChar(char):
#     if char in alpha:
#         return alpha[(alpha.index(char) + number) % len(alpha)]
#     elif char in alphaUp:
#         return alphaUp[(alphaUp.index(char) + number) % len(alphaUp)]
#     else:
#         return char
#
#
# with open("alpha.txt", encoding="utf8") as myFile:
#     for line in myFile:
#         for char in line:
#             summary += changeChar(char)
#
# with open("output.txt", 'w', encoding="utf8") as myFile:
#     myFile.write(summary)