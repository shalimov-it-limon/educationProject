# a = input()
# b = False
# if a and b:
#     print("Обе переменные истинные")
#     print(a,b)
# elif a or b:
#     print("Одна из переменных истинная")
#     print(a or b) # печать одной переменной, той, которая является истинной
# else:
#     print("Обе переменные ложные")

# a = int(input())
# if type(a) == int:
#     if 100 <= a <= 999:
#         if a % 2 == 0:
#             if a % 3 == 0:
#                 print("Число удовлетворяет условиям")
#         print("Число удовлетворяет 2 условиям")
#     print("Число удовлетворяет 1 условию")
# else:
#     print("Число не удовлетворяет условиям")
# if int(100 <= a <= 999 and a % 2 == 0 and a % 3 == 0):
#     print("Число удовлетворяет условиям")
# if type(a) == int and 100 <= a <= 999 and a % 2 == 0 and a % 3 == 0:
#     print("Число удовлетворяет условиям")
# if all([type(a) == int,
#         100 <= a <= 999,
#         a % 2 == 0,
#         a % 3 =м= 0]):
#     print("Число удовлетворяет условиям")

# чтобы был хотя бы один истинный? Тогда на помощь приходит функция
# any([ ]). Ее работа аналогична рассмотренному выше примеру.

# на вход принимает последовательность целых чисел, и возвращает True,
# если все числа ненулевые, и False, если хотя бы одно число равно 0.

# a = int(input('Введите, пожалуйста, последовательность чисел: ')) НЕПРАВИЛЬНО
# a = (list(a))
#
# # if a != 0:
# print(a)

# a = input('Введите, пожалуйста, последовательность чисел: ')
a = list(map(int, input().split()))
print(a)
print(all(a))
# Генераторы списков — это специальный синтаксис, определяющий правила создания и заполнения списков.
L = [ a for a in some_iter_obj if cond ]
# Такая запись аналогична следующей:

L = []

for a in some_iter_obj:
    if cond:
        L.append(a)
# генератор списков, в котором будут храниться квадраты первых десяти натуральных чисел.

squares = [i**2 for i in range(1,11)]
# [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

# квадраты только от нечетных чисел.

squares = [i**2 for i in range(1,11) if i % 2 == 1]
# [1, 9, 25, 49, 81]

# составить список из кортежей:
list_tuples = [(i, i**2) for i in range(1,11)]
#[(1, 1),
# (2, 4),
# (3, 9),
# (4, 16),
# (5, 25),
# (6, 36),
# (7, 49),
# (8, 64),
# (9, 81),
# (10, 100)]

# используя вложенные генераторы списков можно создать матрицу «одним махом»:

M = [[i+j for j in range(5)] for i in range(5)]
#[[0, 1, 2, 3, 4],
# [1, 2, 3, 4, 5],
# [2, 3, 4, 5, 6],
# [3, 4, 5, 6, 7],
# [4, 5, 6, 7, 8]]







