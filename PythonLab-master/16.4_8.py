# конструктор класса — «магический» метод __init__,
# который заранее определяет атрибуты новых экземпляров.
# Первым аргументом он обязательно принимает на вход self,
# а дальше — произвольный набор аргументов, как обычная функция:
# Двойное подчеркивание - дандер, от "double underscore"

class User:
    def __init__(self, name, email):
        self.name = name
        self.email = email

# Метод-конструктор задаётся как функция внутри класса (отступ) и
# первым аргументом всегда принимает self.
#  в него передаётся объект с экземпляром, поэтому его нельзя забывать.
# Этот метод вызывается каждый раз, когда мы создаём экземпляр.
# задали конструктор, при создании объектов в скобки вызова класса можно передавать аргументы,
# которые он принимает на вход.
# можно явно указать, в какой аргумент что класть:


peter = User(name="Peter Robertson", email="peterrobertson@mail.com")
julia = User(name="Julia Donaldson", email="juliadonaldson@mail.com")

print(peter.name)
print(julia.email)

# На самом деле, в отличие от многих языков, Python не даёт явной возможности жёстко
# и ультимативно закрыть доступ к каким-либо данным.
# Но при этом существует соглашение о том, что если название переменной начинается
# с двух нижних подчёркиваний, то она не предназначена для использования извне.
# данные  называют приватными.
# Чтобы задать атрибут для объектов класса в конструкторе, нужно просто придумать
# название и приписать его после self: self.attr_name = "value".