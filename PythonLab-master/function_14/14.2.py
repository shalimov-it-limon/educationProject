# Области видимости определяют,
# в какой части программы мы можем работать с той или иной переменной,
# функцией и т. п., а от каких они «скрыты».
# В Python существует три области видимости:
#         Локальная - "черная коробочка" функции.
#         Глобальная - поле вне "черной коробочки"
#         Нелокальная (добавлена в Python 3) - суперпозиция локальная/глобальная.

def lok_x():
    x = 5
    print(x)


lok_x()


def lok_x(x):
    print(x + 1)


lok_x(5)


def lok_x(x):
    result = x + 1
    return result


print(lok_x(6))


def lok_x(x):
    result = x + 1
    return result


c = lok_x(8)
print(c)

def local():
    x = 6  # локальная переменная # 5
    print(x)


x = 10  # 10 # Эта переменная вне коробочки local()
local()  # Вывод коробочки local()
print(x)
# область видимости переменной (где она может использоваться) всегда определяется местом,
# где ей было присвоено значение, и никакого отношения не имеет к месту, откуда была вызвана функция.

# Глобальная область видимости.


def local():
    print(x)  # 10 # так как x нет в локальной области видимости, мы берем её из глобальной области
# Из бункера мы можем увидеть, что происходит во внешнем мире, но вот наоборот это не работает.


x = 16  # 10
local()
print(x)


x = 3
def function():
    print(x)
    return x


print(function())

print('Skill BAD Var')
# j = 3
#
#
# def func():  # НЕ РАБОТАЕТ, потому что пытаетесь распечатать значение локальной (!) переменнойj
               # в функции func до её объявления, что и приводит к ошибке, так как j еще не определен.
#     print(j)
#     j = 5
#     j += 5
#     return j
#
#
# print(func())

print('My GOOD Var')
j = 3
print(j)


def func(j):
    print(j)
    # j = 5
    j += 5
    return j


print(func(5))
print(j)
print('-' * 20)
# область видимости переменной (где она может использоваться) ВСЕГДА
# определяется местом, где ей было присвоено значение.

#  оператор global, который объявляет переменную доступной для блока кода, следующим за оператором.

x = 3
# print(x)


def func():
    global x # объявляем, что переменная является глобальной
    # print(x)
    x = 6
    x += 5
    return x


func()
# print(func())
print(x) # первая переменная в расчет не берется - масштаб не тот, так как вторая - глобальная.


# не нужно менять глобальные переменные внутри функции.!!!!!!!!!
# Функции образуют локальную область видимости, а скрипты (программы) — глобальную.

# Нелокальная область видимости nonlocal.  используется чаще всего во вложенных функциях,
# когда мы хотим дать интерпретатору понять, что для вложенной функции определенная переменная
# не является локальной, но она и не является глобальной в общем смысле.


def get_my_func():
    def hello_world():
        print("Hello")
    return hello_world


hello_world_func = get_my_func()  # получить функцию в качестве результата

print(type(hello_world_func))  # <class 'function'>
hello_world_func()  # Hello

 # пример, в котором будут возвращаться различные функции.
# Функция нам будет создавать функции, которые будут умножать на какое-то фиксированное число.


def get_mul_func(m):
    nonlocal_m = m

    def local_mul(n):   # 5 * 2   Здесь вводится m, НА которую УМНОЖАЕМ
        return n * nonlocal_m

    return local_mul


two_mul = get_mul_func(3)  # возвращаем функцию, которая будет умножать числа на 2.
                           # Здесь вводится m, НА которую УМНОЖАЕМ
print(two_mul(8))  # 5 * 2   Здесь вводится n, КОТОРУЮ УМНОЖАЕМ

# Использование переменных, объявленных вне функции, называется замыканием функций.